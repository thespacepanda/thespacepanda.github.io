{"version":3,"sources":["daiquiri/interpreter.cljs"],"mappings":";AAMA;;;;AAAA,AAAwBA,AAGrBC,AAAKC,AAAMC;AAHd,AAIE,AAAA,AAAQ,AAAiBC,AAAc,AAAA,AAAcH,AAAKC,AAAOC;;AAEnE,AAAA,AAAME,AAAYH;AAAlB,AACE,AAAAI,AAAoB,AAACE,AAAQ,AAACC,AAAuBP;AAArD,AAAA,AAAAI;AAAA,AAAA,AAAAA,AAAWC;AAAX,AACE,AAAMG,AAAM,AAAaH;AACnBG,AAAM,AAAI,AAACC,AAAOD,AAAO,AAAA,AAACE,AAAaF,AAAOA;AADpD,AAEE,AAAI,AAACG,AAAWH;AACd,AAAA,AAAWH;;AACX,AAAM,AAAaA,AAAUG;;;AAC/BH;;AANJ;;;AAQF,AAAA,AAEA;;;AAAA,AAAcO,AAEXC;AAFH,AAGE,AAACC,AACA,AAAYC,AAAIF;AAAhB,AACE,AAAOE,AAAI,AAACC,AAAAA,AAAAA,AAAUH,AAAAA;;AACtBE;AAHH,AAKCF;;AAEH;;;AAAA,AAAMI,AAEHC;AAFH,AAGE,AAAAC,AAA2B,AAACG,AAAkBJ;AAA9C,AAAAE,AAAAD,AAAA,AAAA,AAAOpB;AAAP,AAAAqB,AAAAD,AAAA,AAAA,AAAYnB;AAAZ,AAAAoB,AAAAD,AAAA,AAAA,AAAkBE;AAAlB,AACE,AAACvB,AAAeC,AACA,AAACI,AAAWH,AACZ,AAACY,AAAcS;;AAEnC;;;;AAAA,AAAOE,AAGJV;AAHH,AAIE,AAAI,AAACW,AAAcX;AACjB,AAACI,AAAQJ;;AACT,AAACD,AAAcC;;;AAEnB,AAAA,AAAMG,AAAWS;AAAjB,AACE,AACE,AAACC,AAAQD;AAAG,AAACF,AAAcE;;AAD7B,AAEE,AAACE,AAAKF;AAAG,AAACb,AAAca;;AAF1B,AAGQA","names":["daiquiri.interpreter/create-element","type","attrs","children","js/React","daiquiri.interpreter/attributes","temp__5735__auto__","js-attrs","cljs.core/clj->js","daiquiri.util/html-to-dom-attrs","class","cljs.core/array?","clojure.string.join","clojure.string/blank?","daiquiri.interpreter/interpret-seq","x","cljs.core.reduce","ret","daiquiri.interpreter/interpret","daiquiri.interpreter/element","element","vec__25914","cljs.core.nth","content","daiquiri.normalize/element","daiquiri.interpreter/interpret-vec","daiquiri.util/element?","v","cljs.core/vector?","cljs.core/seq?"],"sourcesContent":["(ns daiquiri.interpreter\n  (:require [clojure.string :as str]\n            [daiquiri.normalize :as normalize]\n            [daiquiri.util :as util]\n            [cljsjs.react]))\n\n(defn ^js/React.Element create-element\n  \"Create a React element. Returns a JavaScript object when running\n  under ClojureScript, and a om.dom.Element record in Clojure.\"\n  [type attrs children]\n  (.apply (.-createElement js/React) nil (.concat #js [type attrs] children)))\n\n(defn attributes [attrs]\n  (when-let [js-attrs (clj->js (util/html-to-dom-attrs attrs))]\n    (let [class (.-className js-attrs)\n          class (if (array? class) (str/join \" \" class) class)]\n      (if (str/blank? class)\n        (js-delete js-attrs \"className\")\n        (set! (.-className js-attrs) class))\n      js-attrs)))\n\n(declare interpret)\n\n(defn- ^array interpret-seq\n  \"Eagerly interpret the seq `x` as HTML elements.\"\n  [x]\n  (reduce\n   (fn [^array ret x]\n     (.push ret (interpret x))\n     ret)\n   #js []\n   x))\n\n(defn element\n  \"Render an element vector as a HTML element.\"\n  [element]\n  (let [[type attrs content] (normalize/element element)]\n    (create-element type\n                    (attributes attrs)\n                    (interpret-seq content))))\n\n(defn- interpret-vec\n  \"Interpret the vector `x` as an HTML element or a the children of an\n  element.\"\n  [x]\n  (if (util/element? x)\n    (element x)\n    (interpret-seq x)))\n\n(defn interpret [v]\n  (cond\n    (vector? v) (interpret-vec v)\n    (seq? v) (interpret-seq v)\n    :else v))\n"]}